import requests
import time
from datetime import datetime
import json
from concurrent.futures import ThreadPoolExecutor, as_completed

# Alchemy API 网址和API密钥
alchemy_url = "https://solana-mainnet.g.alchemy.com/v2/Flixojc5Cmnk7RFCleAdZXWxDSTar--k"


# 1. 查询代币信息
def get_token_info(token_address):
    url = f"https://frontend-api.pump.fun/coins/{token_address}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"无法获取代币信息，HTTP状态码: {response.status_code}, 响应: {response.text}")


# 2. 获取早期交易
def get_early_swaps(bonding_curve_address, limit=1000, get_oldest=True):
    headers = {"Content-Type": "application/json"}
    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getSignaturesForAddress",
        "params": [
            bonding_curve_address,
            {"limit": limit}
        ]
    }
    response = requests.post(alchemy_url, headers=headers, data=json.dumps(payload))
    if response.status_code == 200:
        response_json = response.json()
        if 'result' in response_json:
            result = response_json['result']
            return sorted(result, key=lambda x: x['blockTime'], reverse=not get_oldest)
        else:
            raise Exception(f"响应中缺少'result'字段: {response_json}")
    else:
        raise Exception(f"无法获取交易历史，HTTP状态码: {response.status_code}, 响应: {response.text}")


# 3. 获取交易详情
def get_transaction_details(signature, retry=3):
    headers = {"Content-Type": "application/json"}
    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getTransaction",
        "params": [
            signature,
            {"encoding": "json", "maxSupportedTransactionVersion": 0}
        ]
    }

    for attempt in range(retry):
        response = requests.post(alchemy_url, headers=headers, data=json.dumps(payload))
        if response.status_code == 200:
            response_json = response.json()
            if 'result' in response_json:
                return response_json['result']
            elif 'error' in response_json:
                raise Exception(f"交易详情错误: {response_json['error']['message']}")
        elif response.status_code == 429:
            wait_time = 2 ** attempt  # 指数退避
            print(f"请求过多，等待{wait_time}秒后重试（{attempt + 1}/{retry}）...")
            time.sleep(wait_time)
        else:
            raise Exception(f"无法获取交易详情，HTTP状态码: {response.status_code}, 响应: {response.text}")

    raise Exception(f"在重试{retry}次后仍无法获取交易详情")


# 4. 处理和展示交易信息
def process_swap(swap, min_sol_amount):
    try:
        details = get_transaction_details(swap['signature'])
        if details:
            timestamp = datetime.fromtimestamp(details['blockTime']).strftime('%Y-%m-%d %H:%M:%S')
            sender = details['transaction']['message']['accountKeys'][0]

            if 'meta' in details:
                pre_balances = details['meta']['preBalances']
                post_balances = details['meta']['postBalances']
                sol_amount = (pre_balances[0] - post_balances[0]) / 1e9

                token_amount = 0
                token_decimals = 6  # 默认设置为6，如果找到实际值会被覆盖
                for balance in details['meta'].get('postTokenBalances', []):
                    if balance['owner'] == sender:
                        token_amount = int(balance['uiTokenAmount']['amount'])
                        token_decimals = balance['uiTokenAmount']['decimals']
                        break

                if sol_amount >= min_sol_amount:
                    return {
                        "timestamp": timestamp,
                        "signature": swap['signature'],
                        "sender": sender,
                        "token_amount": token_amount / 10 ** token_decimals,
                        "sol_amount": sol_amount,
                        "wallet_address": sender  # 添加钱包地址
                    }

    except Exception as e:
        print(f"处理交易 {swap['signature']} 时出错: {str(e)}")

    return None



# 主函数
def main():
    token_address = input("请输入代币地址: ")
    min_sol_amount = float(input("请输入最低购买SOL数量: "))
    num_wallets_to_show = int(input("请输入需要显示的前几名钱包数量: "))

    try:
        # 获取代币信息
        token_info = get_token_info(token_address)
        bonding_curve_address = token_info['associated_bonding_curve']
        token_creator = token_info['creator']  # 获取代币创建者地址
        print(f"关联曲线地址: {bonding_curve_address}")
        print(f"代币创建者地址: {token_creator}")

        # 获取最早的交易
        early_swaps = get_early_swaps(bonding_curve_address, limit=1000, get_oldest=True)
        print(f"获取到 {len(early_swaps)} 笔早期交易")

        # 找到最早的满足条件的交易
        earliest_valid_swap = None
        for swap in early_swaps:
            print(f"正在处理交易: {swap['signature']}")
            result = process_swap(swap, min_sol_amount)
            if result:
                earliest_valid_swap = result
                print(f"找到最早的满足条件的交易: {result['signature']}")
                break
            else:
                print(f"跳过不满足最低SOL数量的交易: {swap['signature']}")

        if not earliest_valid_swap:
            print("未找到满足条件的交易")
            return

        # 从最早的有效交易开始处理
        buy_transactions = [earliest_valid_swap]
        start_index = early_swaps.index(next(s for s in early_swaps if s['signature'] == earliest_valid_swap['signature']))

        print("开始处理后续交易...")
        for swap in early_swaps[start_index+1:]:
            if len(buy_transactions) >= num_wallets_to_show:
                break
            print(f"正在处理交易: {swap['signature']}")
            result = process_swap(swap, min_sol_amount)
            if result:
                buy_transactions.append(result)
                print(f"找到满足条件的买入交易: {result['signature']}")
            else:
                print(f"跳过不满足最低SOL数量的交易: {swap['signature']}")

        # 打印结果
        print("\n满足条件的交易列表:")
        for transaction in buy_transactions:
            print(f"时间: {transaction['timestamp']}")
            print(f"签名: {transaction['signature']}")
            print(f"发送方: {transaction['sender']}")
            print(f"钱包地址: {transaction['wallet_address']}", end="")
            if transaction['wallet_address'] == token_creator:
                print(" (代币创建者)")
            else:
                print()
            print(f"买入: {transaction['token_amount']:.6f} FWOG")
            print(f"卖出: {transaction['sol_amount']:.9f} SOL")
            print("------------------------")

        print(f"总共找到的满足条件的买入交易数: {len(buy_transactions)}")

    except Exception as e:
        print(f"发生错误: {str(e)}")

if __name__ == "__main__":
    main()
